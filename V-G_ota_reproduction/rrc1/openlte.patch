diff --git a/LTE_fdd_enodeb/src/LTE_fdd_enb_rrc.cc b/LTE_fdd_enodeb/src/LTE_fdd_enb_rrc.cc
index c93d324..b4b6d36 100644
--- a/LTE_fdd_enodeb/src/LTE_fdd_enb_rrc.cc
+++ b/LTE_fdd_enodeb/src/LTE_fdd_enb_rrc.cc
@@ -659,6 +659,9 @@ void LTE_fdd_enb_rrc::parse_ul_dcch_message(LIBLTE_BIT_MSG_STRUCT *msg,
     case LIBLTE_RRC_UL_DCCH_MSG_TYPE_RRC_CON_SETUP_COMPLETE:
         rb->set_rrc_state(LTE_FDD_ENB_RRC_STATE_RRC_CONNECTED);
 
+	send_rrc_con_reconfig(user, rb, NULL);
+
+	/*
         // Queue the NAS message for MME
         rb->queue_mme_nas_msg(&rb->ul_dcch_msg.msg.rrc_con_setup_complete.dedicated_info_nas);
 
@@ -669,6 +672,7 @@ void LTE_fdd_enb_rrc::parse_ul_dcch_message(LIBLTE_BIT_MSG_STRUCT *msg,
                           LTE_FDD_ENB_DEST_LAYER_MME,
                           (LTE_FDD_ENB_MESSAGE_UNION *)&nas_msg_ready,
                           sizeof(LTE_FDD_ENB_MME_NAS_MSG_READY_MSG_STRUCT));
+	*/
         break;
     case LIBLTE_RRC_UL_DCCH_MSG_TYPE_UL_INFO_TRANSFER:
         if(LIBLTE_RRC_UL_INFORMATION_TRANSFER_TYPE_NAS == rb->ul_dcch_msg.msg.ul_info_transfer.dedicated_info_type)
diff --git a/liblte/src/liblte_rrc.cc b/liblte/src/liblte_rrc.cc
index 1c82d4f..ffbc3bf 100644
--- a/liblte/src/liblte_rrc.cc
+++ b/liblte/src/liblte_rrc.cc
@@ -12145,9 +12145,60 @@ LIBLTE_ERROR_ENUM liblte_rrc_pack_rrc_connection_reconfiguration_msg(LIBLTE_RRC_
     if(con_reconfig != NULL &&
        msg          != NULL)
     {
+liblte_value_2_bits(0x22, &msg_ptr, 3);
+liblte_value_2_bits(0x05, &msg_ptr, 8);
+liblte_value_2_bits(0x80, &msg_ptr, 8);
+liblte_value_2_bits(0x00, &msg_ptr, 8);
+liblte_value_2_bits(0x68, &msg_ptr, 8);
+liblte_value_2_bits(0x07, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x16, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x96, &msg_ptr, 8);
+liblte_value_2_bits(0x7F, &msg_ptr, 8);
+liblte_value_2_bits(0xF7, &msg_ptr, 8);
+liblte_value_2_bits(0xFF, &msg_ptr, 8);
+liblte_value_2_bits(0x00, &msg_ptr, 8);
+liblte_value_2_bits(0x20, &msg_ptr, 8);
+liblte_value_2_bits(0x00, &msg_ptr, 8);
+liblte_value_2_bits(0xB4, &msg_ptr, 8);
+liblte_value_2_bits(0x68, &msg_ptr, 8);
+liblte_value_2_bits(0x68, &msg_ptr, 8);
+liblte_value_2_bits(0x35, &msg_ptr, 8);
+liblte_value_2_bits(0xDB, &msg_ptr, 8);
+liblte_value_2_bits(0xFF, &msg_ptr, 8);
+liblte_value_2_bits(0xF1, &msg_ptr, 8);
+liblte_value_2_bits(0x00, &msg_ptr, 8);
+liblte_value_2_bits(0x64, &msg_ptr, 8);
+liblte_value_2_bits(0x21, &msg_ptr, 8);
+liblte_value_2_bits(0x2F, &msg_ptr, 8);
+liblte_value_2_bits(0x8B, &msg_ptr, 8);
+liblte_value_2_bits(0x69, &msg_ptr, 8);
+liblte_value_2_bits(0x6E, &msg_ptr, 8);
+
+
+#if 0
         // RRC Transaction ID
         liblte_rrc_pack_rrc_transaction_identifier_ie(con_reconfig->rrc_transaction_id, &msg_ptr);
 
+
         // Extension choice
         liblte_value_2_bits(0, &msg_ptr, 1);
 
@@ -12231,6 +12282,7 @@ LIBLTE_ERROR_ENUM liblte_rrc_pack_rrc_connection_reconfiguration_msg(LIBLTE_RRC_
                 }
             }
         }
+#endif
 
         // Fill in the number of bits used
         msg->N_bits = msg_ptr - msg->msg;
